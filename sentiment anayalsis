import numpy as np
import pandas as pd
import nltk
nltk.download('stopwords')
mport nltk
nltk.download('punkt')


# Importing the dataset
df = pd.read_csv('Restaurant_Reviews.tsv', delimiter = '\t', quoting = 3)
l=[]
import re
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
stop_words = set(stopwords.words("english"))
corpus=[]
ps=PorterStemmer()
for i in  range(0,1000):
    review = re.sub('[^a-zA-Z]', ' ', df['Review'][i])
    review=review.lower()
    review=review.split()
    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]
    review = ' '.join(review)
    corpus.append(review)
print(corpus)
from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=1500)
X=cv.fit_transform(corpus).toarray()

y = df.iloc[:, 1].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 42)
from sklearn.ensemble import RandomForestClassifier

from sklearn.model_selection import GridSearchCV
n_estimators=[50,64,100,128,200]
max_features=[2,3,4,"auto","sqrt","log2"]
bootstrap=[True,False]
oob_score=[True,False]
parameters_grid={
    'n_estimators':n_estimators,
    'max_features':max_features,
    'bootstrap':bootstrap,
    'oob_score':oob_score,

}

rfc=RandomForestClassifier()
rfc.fit(X_train,y_train)
grid=GridSearchCV(rfc,parameters_grid)
grid.fit(X_train,y_train)
print(grid.best_params_)
from sklearn.ensemble import RandomForestClassifier
rfc2=RandomForestClassifier(bootstrap= False, max_features='log2',n_estimators=100,oob_score=False)
rfc2.fit(X_train,y_train)
y_pred=rfc2.predict(X_test)
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
score1 = accuracy_score(y_test,y_pred)
score2 = precision_score(y_test,y_pred)
score3= recall_score(y_test,y_pred)
print(score1)
print(score2)
print(score3)
from sklearn.naive_bayes import MultinomialNB
classifier = MultinomialNB(alpha=0.1)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
score1 = accuracy_score(y_test,y_pred)
score2 = precision_score(y_test,y_pred)
score3= recall_score(y_test,y_pred)
print("\n")
print("Accuracy is ",round(score1*100,2),"%")
print("Precision is ",round(score2,2))
print("Recall is ",round(score3,2))
